{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_this$props","this","props","name","email","react_default","a","createElement","className","alt","src","concat","PureComponent","CardList","robots","cardComponent","map","user","i","components_Card","key","id","Component","SearchBox","aria-label","onChange","searchChange","type","placeholder","Scroll","style","overflowX","overflowY","border","height","children","ErrorBoundary","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","CounterButton","updateCount","count","nextProps","nextState","console","log","color","onClick","Header","components_CounterButton","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateGet","rootReducer","combineReducers","arguments","length","undefined","action","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9688dd79.chunk.js","sourcesContent":["import React, {PureComponent, Component} from 'react';\r\nimport 'tachyons';\r\n\r\nclass Card extends PureComponent{\r\n  render(){\r\n    const {name, email} = this.props;\r\n    return (\r\n      <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n        <img alt='robots' src={`https://robohash.org/${name}?size=200x200`}/>\r\n        <div>\r\n          <h2>{name}</h2>\r\n          <p>{email}</p>\r\n          </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React,{Component} from 'react';\r\nimport Card from './Card';\r\n//import {robots} from './Robots';\r\n\r\nclass CardList extends Component {\r\n  render(){\r\n    const robots=this.props.robots;\r\n    const cardComponent = robots.map((user, i) => {\r\n      return (\r\n        <Card\r\n        key={robots[i].id}\r\n        id={robots[i].id}\r\n        name={robots[i].name}\r\n        email={robots[i].email}\r\n        />\r\n\r\n      )\r\n    });\r\n    return(\r\n      <div>\r\n        {cardComponent}\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default CardList;\r\n","import React, {Component} from 'react';\r\n\r\nclass SearchBox extends Component {\r\n  render(){\r\n    return (\r\n      <div className='tc pa2'>\r\n        <input aria-label='Search Robots' onChange={this.props.searchChange} className='tc pa3 ba b--green bg-lightest-blue' type='search' placeholder='Search Robots'/>\r\n      </div>\r\n\r\n    );\r\n  };\r\n}\r\n\r\nexport default SearchBox;\r\n","import React, {Component} from 'react';\r\n\r\n\r\nclass Scroll extends Component {\r\n  render(){\r\n    return (\r\n      <div style={{overflowX:'hidden', overflowY:'scroll', border: '1px solid black', height:'800px'}}>\r\n        {this.props.children}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Scroll;\r\n","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      hasError:false\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info){\r\n    this.setState({hasError:true});\r\n  }\r\n\r\n  render(){\r\n    if(this.state.hasError){\r\n      return <h1>Oooppps. That ain't right, friend.</h1>\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, {PureComponent, Component} from 'react';\r\n\r\nclass CounterButton extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      count:0\r\n    };\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState)  {\r\n    if(this.state.count !== nextState.count){\r\n      return true;\r\n    }\r\n    return false;\r\n    // console.log(nextProps, nextState);\r\n    // return true;\r\n  }\r\n\r\n  updateCount = () => {\r\n    this.setState((state) => {\r\n      return {count:state.count+1};\r\n    });\r\n  }\r\n  render(){\r\n    console.log(this.props.color);\r\n    return (\r\n      <button color={this.props.color} onClick={this.updateCount}>Count: {this.state.count}\r\n      </button>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CounterButton;\r\n","import React, {Component} from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n  shouldComponentUpdate(nextProps, nextState)  {\r\n    return false;\r\n  }\r\n  \r\n  render(){\r\n    return (\r\n      <div>\r\n        <h1 className='f1'>RobotFriends</h1>\r\n        <CounterButton color={'red'}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport CardList from '../components/CardList';\r\n//import {robots} from './Robots';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport Header from '../components/Header';\r\nimport './App.css';\r\n\r\nimport {setSearchField, requestRobots} from '../actions';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n};\r\n\r\nclass App extends Component {\r\n  // constructor(){\r\n  //   super();\r\n  //   this.state= {\r\n  //     robots:[]\r\n      // searchfield:''\r\n  //   }\r\n  // }\r\n\r\n  componentDidMount(){\r\n    //console.log(this.props.store.getState());\r\n    this.props.onRequestRobots();\r\n    //console.log('2');\r\n  }\r\n\r\n  // onSearchChange = (event) => {\r\n  //   this.setState({searchfield:event.target.value});\r\n  // };\r\n\r\n  render(){\r\n    const {searchField, onSearchChange, robots, isPending} = this.props;\r\n    const filteredRobots = robots.filter((robot) => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n    return isPending ?\r\n    <h1>Loading</h1> :\r\n    (\r\n      <div className='tc'>\r\n      <Header/>\r\n      <SearchBox searchChange={onSearchChange}/>\r\n      <Scroll>\r\n      <ErrorBoundary>\r\n      <CardList robots={filteredRobots}/>\r\n      </ErrorBoundary>\r\n      </Scroll>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {CHANGE_SEARCH_FIELD, REQUEST_ROBOT_FAILED, REQUEST_ROBOT_PENDING, REQUEST_ROBOT_SUCCESS} from './constants';\r\n\r\nexport const setSearchField = (text) => {\r\n  return {\r\n    type:CHANGE_SEARCH_FIELD,\r\n    payload:text\r\n  };\r\n};\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({type: REQUEST_ROBOT_PENDING});\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n  .then((response) => {\r\n    return response.json();\r\n  })\r\n  .then((robots) => {\r\n    dispatch({type:REQUEST_ROBOT_SUCCESS, payload:robots});\r\n  })\r\n  .catch((error) => {\r\n    dispatch({type:REQUEST_ROBOT_FAILED, payload:error});\r\n  });\r\n};\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOT_PENDING = 'REQUEST_ROBOT_PENDING';\r\n\r\nexport const REQUEST_ROBOT_SUCCESS = 'REQUEST_ROBOT_SUCCESS';\r\n\r\nexport const REQUEST_ROBOT_FAILED = 'REQUEST_ROBOT_FAILED';\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {CHANGE_SEARCH_FIELD, REQUEST_ROBOT_FAILED, REQUEST_ROBOT_PENDING, REQUEST_ROBOT_SUCCESS} from './constants';\r\n\r\nconst initialStateSearch = {\r\n  searchField:''\r\n};\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={})=>{\r\n  switch(action.type){\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, {searchField:action.payload});\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst initialStateGet = {\r\n  isPending:false,\r\n  robots:[],\r\n  error:''\r\n}\r\nexport const requestRobots = (state=initialStateGet, action={})=>{\r\n  switch(action.type){\r\n    case REQUEST_ROBOT_PENDING:\r\n      return Object.assign({},state,{isPending:true});\r\n    case REQUEST_ROBOT_SUCCESS:\r\n      return Object.assign({},state,{robots:action.payload, isPending:false});\r\n    case REQUEST_ROBOT_FAILED:\r\n      return Object.assign({},state,{error:action.payload, isPending:false});\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider, connect} from 'react-redux';\r\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\r\nimport {createLogger} from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\n// import Card from './Card';\r\nimport App from './containers/App';\r\n//import CardList from './CardList';\r\n//import {robots} from './Robots';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {searchRobots, requestRobots} from './reducers';\r\n\r\nconst rootReducer = combineReducers({searchRobots, requestRobots});\r\nconst logger = createLogger();\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App/>\r\n  </Provider>\r\n, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}